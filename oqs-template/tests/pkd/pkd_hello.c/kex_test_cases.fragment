
#define PKDTESTS_KEX_OQS_PUREPQ(f, client, kexcmd) \
{%- for kem in config['kems'] %}
    {%- set outer_loop_last = loop.last %}
    {%- for variant in kem['variants'] %}
    f(client, rsa_{{ variant['name']|lower}}_sha384, kexcmd(KEX_{{ variant['name'] }}_SHA384), setup_rsa, teardown) \
    f(client, ecdsa_256_{{ variant['name']|lower}}_sha384, kexcmd(KEX_{{ variant['name'] }}_SHA384), setup_ecdsa_256, teardown) \
    f(client, oqsdefault_{{ variant['name']|lower}}_sha384, kexcmd(KEX_{{ variant['name'] }}_SHA384), setup_oqsdefault, teardown){%- if not (outer_loop_last and loop.last) %} \{% endif %}
    {%- endfor %}
{%- endfor %}

#define PKDTESTS_KEX_OQS_HYBRID(f, client, kexcmd) \
{%- for kem in config['kems'] %}
    {%- set outer_loop_last = loop.last %}
    {%- for variant in kem['variants'] %}
    f(client, rsa_ecdh_nistp384_{{ variant['name']|lower }}_sha384, kexcmd(KEX_ECDH_NISTP384_{{ variant['name'] }}_SHA384), setup_rsa, teardown) \
    f(client, ecdsa_256_ecdh_nistp384_{{ variant['name']|lower }}_sha384, kexcmd(KEX_ECDH_NISTP384_{{ variant['name'] }}_SHA384), setup_ecdsa_256, teardown) \
    f(client, oqsdefault_ecdh_nistp384_{{ variant['name']|lower }}_sha384, kexcmd(KEX_ECDH_NISTP384_{{ variant['name'] }}_SHA384), setup_oqsdefault, teardown) \
    f(client, p256_oqsdefault_ecdh_nistp384_{{ variant['name']|lower }}_sha384, kexcmd(KEX_ECDH_NISTP384_{{ variant['name'] }}_SHA384), setup_p256_oqsdefault, teardown){%- if not (outer_loop_last and loop.last) %} \{% endif %}
    {%- endfor %}
{%- endfor %}

/* Classical key exchange is used for testing the digital signature algorithms. */
#define PKDTESTS_OQSKEYAUTH(f, client, kexcmd) \
{%- for sig in config['sigs'] %}
    {%- set outer_loop_last = loop.last %}
    {%- for variant in sig['variants'] %}
    {%- set variant_loop_last = loop.last %}
    f(client, {{ variant['name']|lower }}_ecdh_sha2_nistp256, kexcmd("ecdh-sha2-nistp256"), setup_{{ variant['name']|lower }}, teardown) \
        {%- for classical_alg in variant['mix_with'] %}
    f(client, {{ classical_alg['name']|lower }}_{{ variant['name']|lower }}_ecdh_sha2_nistp256, kexcmd("ecdh-sha2-nistp256"), setup_{{ classical_alg['name']|lower }}_{{ variant['name']|lower }}, teardown){%- if not (outer_loop_last and variant_loop_last and loop.last) %} \{% endif %}
        {%- endfor %}
    {%- endfor %}
{%- endfor %}

