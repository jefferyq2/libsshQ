
#define PKDTESTS_KEX_OQS_PUREPQ(f, client, kexcmd) \
{%- for kex in config['kexs'] %}
    f(client, rsa_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_rsa, teardown) \
    f(client, ecdsa_256_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_ecdsa_256, teardown) \
    f(client, picnic_l1_full_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_picnic_l1_full, teardown){%- if not loop.last %} \{% endif %}
{%- endfor %}

#define PKDTESTS_KEX_OQS_HYBRID(f, client, kexcmd) \
{%- for kex in config['kexs'] %}
    {%- set outer_loop_last = loop.last %}
    {%- for curve in kex['mix_with'] %}
    f(client, rsa_ecdh_{{ curve['name'] }}_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_ECDH_{{ curve['name']|upper }}_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_rsa, teardown) \
    f(client, ecdsa_256_ecdh_{{ curve['name'] }}_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_ECDH_{{ curve['name']|upper }}_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_ecdsa_256, teardown) \
    f(client, picnic_l1_full_ecdh_{{ curve['name'] }}_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_ECDH_{{ curve['name']|upper }}_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_picnic_l1_full, teardown) \
    f(client, ecdsa_nistp256_picnic_l1_full_ecdh_{{ curve['name'] }}_{{ kex['name']|lower }}_{{ kex['hash'] }}, kexcmd(KEX_ECDH_{{ curve['name']|upper }}_{{ kex['name']|upper }}_{{ kex['hash']|upper }}), setup_ecdsa_nistp256_picnic_l1_full, teardown){%- if not (outer_loop_last and loop.last) %} \{% endif %}
    {%- endfor %}
{%- endfor %}

/* Classical key exchange is used for testing the digital signature algorithms. */
#define PKDTESTS_OQSKEYAUTH(f, client, kexcmd) \
{%- for sig in config['sigs'] %}
    {%- set outer_loop_last = loop.last %}
    f(client, {{ sig['name']|lower }}_ecdh_sha2_nistp256, kexcmd("ecdh-sha2-nistp256"), setup_{{ sig['name']|lower }}, teardown) \
    {%- for classical_alg in sig['mix_with'] %}
    f(client, {{ classical_alg['name']|lower }}_{{ sig['name']|lower }}_ecdh_sha2_nistp256, kexcmd("ecdh-sha2-nistp256"), setup_{{ classical_alg['name']|lower }}_{{ sig['name']|lower }}, teardown){%- if not (outer_loop_last and loop.last) %} \{% endif %}
    {%- endfor %}
{%- endfor %}

